//Optimal Approach

class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        Node zHead = new Node(-1);
        Node oHead = new Node(-1);
        Node tHead = new Node(-1);
        
        Node curr = head;
        Node zero = zHead;
        Node one = oHead;
        Node two = tHead;
        
        while(curr!=null){
            if(curr.data==0){
                zero.next = curr;
                zero = curr;
            }
            else if(curr.data==1){
                one.next = curr;
                one = curr;
            }
            else{
                two.next = curr;
                two = curr;
            }
            curr=curr.next;
        }
        zero.next = (oHead.next!=null)?oHead.next:tHead.next;
        one.next = tHead.next;
        two.next = null;
        
        return zHead.next;
    }
}
