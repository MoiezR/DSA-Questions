class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        int max = Integer.MIN_VALUE;
        for(int i=0; i<n ; i++){
            if(piles[i]>max) max = piles[i];
        }
        int low=1, high=max;
        int k = -1;
        while(low<=high){
            int mid = (low+high)/2;
            int hours = totalH(piles, mid, n);
            if(hours<=h){
                k = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return k;
    }
    public int totalH(int[] piles, int mid, int n){
        double hours=0;
        for(int i=0; i<n; i++){
            hours+=Math.ceil((double)piles[i]/(double)mid);
        }
        return (int)hours;
    }
}

/Using Binary Search
