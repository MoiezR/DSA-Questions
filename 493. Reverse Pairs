//Optimal

class Solution {
    public int mergeSort(int[] nums, int lb, int hb){
        int count = 0;
        int low = lb;
        int high = hb;

        if(low>=high) return count;

        int mid = (low+high)/2;

        count += mergeSort(nums, low, mid);
        count += mergeSort(nums, mid+1, high);

        count += countPairs(nums, low, high, mid);

        merge(nums, low, high, mid);

        return count;
    }
    public void merge(int[] nums, int low, int high, int mid){
        ArrayList<Integer> arr = new ArrayList<>();
        int left = low;
        int right = mid+1;

        while(left<=mid && right<=high){
            if(nums[left]<=nums[right]){
                arr.add(nums[left]);
                left++;
            }
            else{
                arr.add(nums[right]);
                right++;
            }
        }
        while(left<=mid){
            arr.add(nums[left]);
            left++;
        }
        while(right<=high){
            arr.add(nums[right]);
            right++;
        }
        for(int i=low; i<=high; i++){
            nums[i] = arr.get(i-low);
        }
    }
    public int countPairs(int[] nums, int low, int high, int mid){
        int right = mid + 1;
        int count = 0;
        for (int i = low; i <= mid; i++) {
            while (right <= high && nums[i] > 2 * (long)nums[right]) right++;
            count += (right - (mid + 1));
        }
        return count;
    }
    public int reversePairs(int[] nums){
        return mergeSort(nums, 0, nums.length-1);
    }
}
