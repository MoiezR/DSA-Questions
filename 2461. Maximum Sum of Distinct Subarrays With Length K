class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        int max=0;
        int n = nums.length-(k-1);
        for(int i=0; i<n ;i++){
            int sum=0;
            HashSet<Integer> hs = new HashSet<>();
            for(int j=i; j<k+i; j++){
                if(!hs.contains(nums[j])){
                    sum+=nums[j];
                    hs.add(nums[j]);
                }
                else{
                    sum=0;
                    break;
                }
            }
            hs.clear();
            if(sum>max) max=sum;
        }
        return max;
    }
}

//Brute force approach

class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        long max=0, curr=0;
        HashSet<Integer> hs = new HashSet<>();
        int right=0;
        for(int left=0; left<nums.length; left++){
            while(right<nums.length&&!hs.contains(nums[right])&&hs.size()<k){
                hs.add(nums[right]);
                curr+=nums[right];
                right++;
            }
            if(hs.size()==k){
                max = Math.max(max, curr);
            }
            hs.remove(nums[left]);
            curr-=nums[left];
        }
        return max;
    }
}

//Suboptimal approach
