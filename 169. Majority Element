class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        int max = Integer.MIN_VALUE;
        int count = 0;
        for(int i=0; i<n ;i++){
            if(nums[i]>max) max = nums[i];
        }
        int freq[] = new int[max+1];

        for(int i=0; i<n ;i++){
            freq[nums[i]] += 1;
        }

        for(int i=0; i<=max; i++){
            if(freq[i]>freq[count]) count = i;
        }

        return count;

    }
}

//Brute Force Partial Test Cases

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}

//Suboptimal 

class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        int el=nums[0];
        for(int i=0; i<nums.length; i++){
            if(count==0){
                el = nums[i];
            }
            if(nums[i]==el){
                count++;
            }
            else{
                count--;
            }
        }
        return el;
    }
}

//Optimal
