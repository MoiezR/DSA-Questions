//Brute Force Solution

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int answer[] = new int[n];
        for(int i = 0; i<n ; i++){
            int prod = 1;
            for(int j = 0; j<n ; j++){
                if(i==j) continue;
                prod *= nums[j];
            }
            answer[i]=prod;
        }
        return answer;
    }
}

//Suboptimal Solution

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int prod[] = new int[n];
        int pre[] = new int[n];
        int suf[] = new int[n];
        pre[0] = 1;
        suf[n-1] = 1;
        for(int i=1; i<n ;i++){
            pre[i] = pre[i-1]*nums[i-1];
        }
        for(int i=n-2; i>=0; i--){
            suf[i]=suf[i+1]*nums[i+1];
        }

        for(int i=0; i<n ;i++){
            prod[i]=pre[i]*suf[i];
        }

        return prod;
    }
}

//Optimal Solution

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int prod[] = new int[n];
        Arrays.fill(prod, 1);
        int curr=1;
        for(int i=0; i<n;i++){
            prod[i]*=curr;
            curr*=nums[i];
        }
        curr=1;
        for(int i=n-1; i>=0; i--){
            prod[i]*=curr;
            curr*=nums[i];
        }
        return prod;
    }
}

