class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int maxArea = 0;
        for(int i=0; i<n-1 ; i++){
            for(int j=i+1; j<n; j++){
                int length = j-i;
                int breadth = Math.min(height[i], height[j]);
                int area = length*breadth;
                maxArea = Math.max(area, maxArea);
            }
        }
        return maxArea;
    }
}

//Brute Force

class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int maxArea = 0;
        int right = n-1;
        int left = 0;
        while(left<right){
            int area = Math.min(height[left], height[right])*(right-left);
            maxArea = Math.max(area, maxArea);
            if(height[left]<height[right]) left++;
            else right--;
        }
        return maxArea;
    }
}

//Suboptimal 
