class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        int count = n/3;
        HashMap<Integer, Integer> hm = new HashMap<>();
        List<Integer> ll = new ArrayList<>();
        for(int i=0; i<n; i++){
            // if(!hm.containsKey(nums[i])) hm.put(nums[i], 1);
            // else hm.put(nums[i], hm.get(nums[i])+1);
            hm.put(nums[i], hm.getOrDefault(nums[i], 0) +1);
            
            if(hm.get(nums[i])>count && !ll.contains(nums[i])) ll.add(nums[i]);
        }
        return ll;
    }
}

//Using Hashing 

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        int count = n/3;
        List<Integer> ll = new ArrayList<>();
        int e1=0, e2=0;
        int c1=0, c2=0;
        for(int i=0; i<n ; i++){
            if(c1==0 && nums[i]!=e2){
                e1=nums[i];
                c1=1;
            }
            else if(c2==0 && nums[i]!=e1){
                e2=nums[i];
                c2=1;
            }
            else if(nums[i]==e1) c1++;
            else if(nums[i]==e2) c2++;
            else{
                c1--;
                c2--;
            }
        }
        c1=0;
        c2=0;
        for(int i=0; i<n ;i++){
            if(nums[i]==e1) c1++;
            else if(nums[i]==e2) c2++;
        }
        if(c1>count) ll.add(e1);
        if(c2>count) ll.add(e2);

        return ll;
    }
}

//Using Boyer Moore majority voting solution
