
class Solution {
    // Function to flatten a linked list
    Node flatten(Node root) {
        // code here
        if(root==null || root.next==null) return root;
        Node merger = flatten(root.next);
        
        Node head = merge(root, merger);
        return flat(head);
    }
    Node merge(Node one, Node two){
        
        Node dummyNode = new Node(-1);
        Node result = dummyNode;
        while(one!=null && two!=null){
            if(one.data<two.data){
                result.bottom = one;
                result = one;
                one=one.bottom;
            }
            else{
                result.bottom = two;
                result = two;
                two=two.bottom;
            }
            result.next = null;
        }
        if(one!=null) result.bottom = one;
        else result.bottom = two;
        
        if(result.bottom!=null) result.bottom.next = null;
        
        return dummyNode.bottom;
    }
    Node flat(Node head){
        Node temp = head;
        while(temp.bottom!=null){
            temp.next = temp.bottom;
            temp = temp.bottom;
        }
        return head;
    }
}
