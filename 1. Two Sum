class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int arr[] = new int[2];
        for(int i = 0; i<n ; i++){
            int sum=0;
            sum+=nums[i];
            for(int j = i+1 ; j<n ; j++){
                sum+=nums[j];
                if(sum==target){
                    arr[0]=i;
                    arr[1]=j;
                    return arr;
                }
                sum-=nums[j];
            }
        }
        return nums;
    }
}

//Brute Force

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        Map<Integer, Integer> hm = new HashMap<>();
        for(int i=0 ;i<n ;i++){
            hm.put(nums[i], i);
        }
        for(int i=0; i<n ; i++){
            int complement = target - nums[i];
            if(hm.containsKey(complement) && hm.get(complement)!=i){
                return new int[]{hm.get(complement), i};
            }
        }
        return new int[]{};
    }
}

//Suboptimal / Optimal

