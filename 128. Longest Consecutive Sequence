class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        if(n==0) return 0;
        int maxCount = 1;
        for(int i=0; i<n ;i++){
            int x = nums[i];
            int count = 1;
            for(int j=0; j<n ;j++){
                if(nums[j]==x+1){
                    count++;
                    x+=1;
                    j=0;               
                 }
                maxCount = Math.max(count, maxCount);
            }
        }
        return maxCount;
    }
}

//Brute Force

class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        if(n==0) return 0;
        int maxCount = 1;
        HashSet<Integer> hs = new HashSet<>();
        for(int i=0; i<n; i++){
            hs.add(nums[i]);
        }
        for(int i: hs){
            if(!hs.contains(i-1)){
                int x = i;
                int count = 1;
                while(hs.contains(x+1)){
                    count++;
                    x++;
                }
                maxCount = Math.max(count, maxCount);
            }
        }
        return maxCount;
    }
}

//Optimal

