class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        subsets(k, n, 1, res, new ArrayList<>(), 0);
        return res;
    }
    public void subsets(int k, int n, int i, List<List<Integer>> res, List<Integer> ds, int sum){
        if(sum==n){
            if(ds.size()==k){
                res.add(new ArrayList<>(ds));
            }
            return;
        }
        for(; i<=9; i++){
            if(ds.size()==k) break;
            ds.add(i);
            subsets(k, n, i+1, res, ds, sum+i);
            ds.remove(ds.size()-1);
        }
    }
}

//Alternate

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        subsets(k, n, 1, res, new ArrayList<>(), 0);
        return res;
    }
    public void subsets(int k, int n, int i, List<List<Integer>> res, List<Integer> ds, int sum){
        if(i>9){
            if(sum==n && ds.size()==k) res.add(new ArrayList<>(ds));
            return;
        }
        ds.add(i);
        subsets(k, n, i+1, res, ds, sum+i);
        ds.remove(ds.size()-1);
        subsets(k, n, i+1, res, ds, sum);
    }
}
