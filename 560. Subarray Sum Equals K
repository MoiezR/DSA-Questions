class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int count = 0;
        for(int i=0; i<n ;i++){
            int sum=0;
            for(int j=i; j<n ;j++){
                sum+=nums[j];
                if(sum==k) count++;
            }
        }
        return count;
    }
}

//Brute Force

class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        HashMap<Integer, Integer> hm = new HashMap<>();
        int prefixSum = 0;
        int count = 0;
        hm.put(0,1);
        for(int i=0; i<n; i++){
            prefixSum+=nums[i];
            if(hm.containsKey(prefixSum-k)) count += hm.get(prefixSum-k);
            hm.put(prefixSum, hm.getOrDefault(prefixSum, 0)+1);
        }
        return count;
    }
}

//Optimal
