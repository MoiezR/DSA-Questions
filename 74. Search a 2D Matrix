//Optimal, Using Binary Search

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int low = 0;
        int high = m-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(matrix[mid][n-1]>=target && matrix[mid][0]<=target){
                return binSearch(matrix[mid], target);
            }
            else if(matrix[mid][0]>target){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return false;
    }
    public boolean binSearch(int[] arr, int target){
        int n = arr.length;
        int low = 0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]==target) return true;
            else if(arr[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return false;
    }
}

//Alternate, treats the array as 1D

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int low = 0;
        int high = m-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(matrix[mid][n-1]>=target && matrix[mid][0]<=target){
                return binSearch(matrix[mid], target);
            }
            else if(matrix[mid][0]>target){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return false;
    }
    public boolean binSearch(int[] arr, int target){
        int n = arr.length;
        int low = 0;
        int high = n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]==target) return true;
            else if(arr[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return false;
    }
}
