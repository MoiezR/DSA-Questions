//Brute Force Approach

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode curr = head;
        Stack<Integer> st = new Stack<>();
        while(curr!=null){
            st.push(curr.val);
            curr=curr.next;
        }
        curr=head;
        while(curr!=null){
            if(st.peek()==curr.val) st.pop();
            curr=curr.next;
        }
        return st.isEmpty();
    }
}

//Optimal Approach

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode newHead = rev(slow.next);
        ListNode first = head;
        ListNode second = newHead;
        while(second!=null){
            if(first.val!=second.val){
                rev(newHead);
                return false;
            }
            first=first.next;
            second=second.next;
        }
        rev(newHead);
        return true;
    }
    public ListNode rev(ListNode head){
        if(head==null || head.next==null) return head;
        ListNode newHead = rev(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        
        return newHead;
    }
}

