//Sheer Brute

class Solution {
    public Node addOne(Node head) {
        // code here.
        head = rev(head);
        Node temp = head;
        while(temp.next!=null){
            if(temp.data<9){
                temp.data++;
                head = rev(head);
                return head;
            }
            temp.data = 0;
            temp=temp.next;
        }
        if(temp.data==9){
            Node newNode = new Node(1);
            temp.data=0;
            temp.next = newNode;
        }
        else temp.data++;
        head = rev(head);
        return head;
    }
    public Node rev(Node head){
        if(head==null || head.next==null) return head;
        Node newHead = rev(head.next);
        Node front = head.next;
        front.next = head;
        head.next = null;
        
        return newHead;
    }
}

//Better Brute


class Solution {
    public Node addOne(Node head) {
        // code here.
        head = rev(head);
        Node temp = head;
        int carry = 1;
        while(temp!=null){
            temp.data+=carry;
            if(temp.data<10){
                carry = 0;
                break;
            }
            else{
                temp.data=0;
                carry = 1;
            }
            temp = temp.next;
        }
        head = rev(head);
        if(carry==1){
            Node newNode = new Node(1);
            newNode.next = head;
            head = newNode;
        }
        return head;
    }
    public Node rev(Node head){
        if(head==null || head.next==null) return head;
        Node newHead = rev(head.next);
        Node front = head.next;
        front.next = head;
        head.next = null;
        
        return newHead;
    }
}

//Optimized using Recursion


class Solution {
    public Node addOne(Node head) {
        // code here.
        int carry = counter(head);
        if(carry==1){
            Node newNode = new Node(1);
            newNode.next = head;
            head = newNode;
        }
        return head;
    }
    
    public int counter(Node head){
        if(head==null) return 1;
        int carry = counter(head.next);
        head.data+=carry;
        if(head.data==10){
            head.data = 0;
            return 1;
        }
        return 0;
    }
}
