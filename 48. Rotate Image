class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int newm[][] = new int[n][m];
        for(int i=0; i<n ;i++){
            for(int j=0; j<m ;j++){
                newm[j][n-i-1] = matrix[i][j];
            }
        }
        for(int i=0; i<n ;i++){
            for(int j=0; j<m ;j++){
                matrix[i][j] = newm[i][j];
            }
        }
    }
}

//Brute Force without in-place

class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        for(int i=0; i<n; i++){
            for(int j=i; j<m; j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        for(int i=0; i<n; i++){
            rev(matrix[i], 0, m-1);
        }
    }

    public void rev(int arr[], int i, int j){
        while(i<j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }
}

//Optimal in-place

