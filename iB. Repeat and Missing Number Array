//Brute Force

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] repeatedNumber(final int[] A) {
        int ans[] = new int[2];
        int n = A.length;
        int hash[] = new int[n+1];
        for(int i = 0; i<n ;i++){
            hash[A[i]]++;
        }
        for(int i=1; i<=n; i++){
            int count = hash[i];
            if(count==2) ans[0] = i;
            if(count==0) ans[1] = i;
        }
        return ans;
    }
}

//Optimal

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] repeatedNumber(final int[] A) {
        int n = A.length;
        
        long eSum = (long) n * (n + 1) / 2;
        long e2Sum = (long) n * (n + 1) * (2 * n + 1) / 6;

        long rSum = 0;
        long r2Sum = 0;
        for (int i = 0; i < n; i++) {
            rSum += A[i];
            r2Sum += (long) A[i] * A[i];
        }

        long diffSum = rSum - eSum; // x - y (where x is the repeated number, y is the missing number)
        long diffSqSum = r2Sum - e2Sum; // x^2 - y^2

        // Step 4: Solve the equations
        // diffSqSum = x^2 - y^2 = (x - y)(x + y)
        // sumXY = x + y = diffSqSum / diffSum
        long sumXY = diffSqSum / diffSum;

        // x = (sumXY + diffSum) / 2
        long x = (sumXY + diffSum) / 2;
        // y = x - diffSum
        long y = x - diffSum;

        return new int[]{(int) x, (int) y};
    }
}


