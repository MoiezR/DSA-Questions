//Brute Force

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] repeatedNumber(final int[] A) {
        int ans[] = new int[2];
        int n = A.length;
        int hash[] = new int[n+1];
        for(int i = 0; i<n ;i++){
            hash[A[i]]++;
        }
        for(int i=1; i<=n; i++){
            int count = hash[i];
            if(count==2) ans[0] = i;
            if(count==0) ans[1] = i;
        }
        return ans;
    }
}

//Optimal

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] repeatedNumber(final int[] A) {
        int n = A.length;
        
        long eSum=(n*(n+1))/2;
        long rSum=0;
        long e2Sum=(n*(n+1)*(2*n+1))/6;
        long r2Sum=0;
        
        for(int i=0; i<A.length; i++){
            rSum+=A[i];
            r2Sum+=(long)A[i]*(long)A[i];
        }
        
        long val1 = rSum-eSum;
        long val2 = r2Sum-e2Sum;
        val2 = val2/val1;
        long x = (val1+val2)/2;
        long y = x-val1;
        
        return new int[]{(int)x, (int)y};
        
    }
}

